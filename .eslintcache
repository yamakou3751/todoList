[{"C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\reportWebVitals.js":"1","C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\App.js":"2","C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\index.js":"3","C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\components\\Todo.js":"4","C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\components\\Form.js":"5","C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\components\\FilterButton.js":"6"},{"size":362,"mtime":1610366812827,"results":"7","hashOfConfig":"8"},{"size":3324,"mtime":1610794602135,"results":"9","hashOfConfig":"8"},{"size":355,"mtime":1610468041562,"results":"10","hashOfConfig":"8"},{"size":2610,"mtime":1610641160646,"results":"11","hashOfConfig":"8"},{"size":905,"mtime":1610534295716,"results":"12","hashOfConfig":"8"},{"size":808,"mtime":1610794110355,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h1tfpo",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\reportWebVitals.js",[],"C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\App.js",["27"],"import React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\n\n//フィルターstateの其々の処理⇒key配列(タスクname)をFILTER_NAMESに格納\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\n//key(ALL,Active,Completed)をFILTER_NAMESに格納\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n//タスクのデータを保持（フック）\n  const [tasks, setTasks] = useState(props.tasks);\n\n  //フィルターstate管理\n  const [filter, setFilter] = useState('All');\n \n  //以下、コールバックpropsの処理\n  //name(form入力のvalue)を受け取り　⓵オブジェクトに変換　⓶フックを呼び出して追加\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n  //チェックボックス機能（htmlのcheckbox要素と同期させる処理)\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);　//⇒idが一致したらリストにアップする\n  }\n\n  //（リストの）削除ボタン機能⇒idが一致しないものをstateで保持(=一致したら置換されるので削除される)\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  //エディット機能\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //オブジェクトの一部（name）を変更する\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  //FilterButtonコンポーネントにprops(FILTERのkey)を渡す\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  //リストのコメント部分の処理\n  const taskNum = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${taskNum} remaining`;\n\n    return (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\index.js",[],"C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\components\\Todo.js",[],"C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\components\\Form.js",[],"C:\\Users\\home3\\OneDrive\\Desktop\\moz-todo-react\\src\\components\\FilterButton.js",[],{"ruleId":"28","severity":1,"message":"29","line":98,"column":7,"nodeType":"30","endLine":102,"endColumn":8},"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement"]